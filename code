import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.net.*;
import java.security.*;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import javax.crypto.*;
import javax.crypto.spec.*;
import javax.swing.*;

public class P2PPasswordShare extends JFrame {
    private JTextArea logArea;
    private JTextField portField, hostField, connectPortField, passwordField;
    private JButton startServerBtn, connectBtn, sendBtn;
    private ServerSocket serverSocket;
    private Socket clientSocket;
    private ObjectOutputStream out;
    private ObjectInputStream in;
    private SecretKey sharedKey;
    private boolean isConnected = false;

    public P2PPasswordShare() {
        setTitle("P2P Password Sharing Tool");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout(10, 10));

        // Top panel - Server controls
        JPanel serverPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        serverPanel.setBorder(BorderFactory.createTitledBorder("Server Mode"));
        serverPanel.add(new JLabel("Port:"));
        portField = new JTextField("5000", 6);
        serverPanel.add(portField);
        startServerBtn = new JButton("Start Server");
        serverPanel.add(startServerBtn);

        // Client panel
        JPanel clientPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        clientPanel.setBorder(BorderFactory.createTitledBorder("Client Mode"));
        clientPanel.add(new JLabel("Host:"));
        hostField = new JTextField("localhost", 10);
        clientPanel.add(hostField);
        clientPanel.add(new JLabel("Port:"));
        connectPortField = new JTextField("5000", 6);
        clientPanel.add(connectPortField);
        connectBtn = new JButton("Connect");
        clientPanel.add(connectBtn);

        JPanel topPanel = new JPanel(new GridLayout(2, 1));
        topPanel.add(serverPanel);
        topPanel.add(clientPanel);

        // Middle panel - Log area
        logArea = new JTextArea();
        logArea.setEditable(false);
        logArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JScrollPane scrollPane = new JScrollPane(logArea);
        scrollPane.setBorder(BorderFactory.createTitledBorder("Connection Log"));

        // Bottom panel - Password sharing
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        bottomPanel.setBorder(BorderFactory.createTitledBorder("Share Password"));
        bottomPanel.add(new JLabel("Password:"));
        passwordField = new JTextField(20);
        bottomPanel.add(passwordField);
        sendBtn = new JButton("Send Password");
        sendBtn.setEnabled(false);
        bottomPanel.add(sendBtn);

        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);

        // Event handlers
        startServerBtn.addActionListener(e -> startServer());
        connectBtn.addActionListener(e -> connectToServer());
        sendBtn.addActionListener(e -> sendPassword());

        setVisible(true);
    }

    private void log(String message) {
        SwingUtilities.invokeLater(() -> {
            logArea.append(message + "\n");
            logArea.setCaretPosition(logArea.getDocument().getLength());
        });
    }

    private void startServer() {
        new Thread(() -> {
            try {
                int port = Integer.parseInt(portField.getText());
                serverSocket = new ServerSocket(port);
                log("Server started on port " + port);
                log("Waiting for connection...");
                
                startServerBtn.setEnabled(false);
                connectBtn.setEnabled(false);

                clientSocket = serverSocket.accept();
                log("Client connected from " + clientSocket.getInetAddress());

                setupStreams();
                performKeyExchange(true);
                startReceiving();

            } catch (Exception e) {
                log("Server error: " + e.getMessage());
                startServerBtn.setEnabled(true);
                connectBtn.setEnabled(true);
            }
        }).start();
    }

    private void connectToServer() {
        new Thread(() -> {
            try {
                String host = hostField.getText();
                int port = Integer.parseInt(connectPortField.getText());
                
                log("Connecting to " + host + ":" + port);
                clientSocket = new Socket(host, port);
                log("Connected to server!");

                startServerBtn.setEnabled(false);
                connectBtn.setEnabled(false);

                setupStreams();
                performKeyExchange(false);
                startReceiving();

            } catch (Exception e) {
                log("Connection error: " + e.getMessage());
                connectBtn.setEnabled(true);
                startServerBtn.setEnabled(true);
            }
        }).start();
    }

    private void setupStreams() throws IOException {
        out = new ObjectOutputStream(clientSocket.getOutputStream());
        out.flush();
        in = new ObjectInputStream(clientSocket.getInputStream());
    }

    private void performKeyExchange(boolean isServer) throws Exception {
        log("Performing secure key exchange...");
        
        // Generate DH key pair
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("DH");
        kpg.initialize(2048);
        KeyPair keyPair = kpg.generateKeyPair();

        // Exchange public keys
        if (isServer) {
            out.writeObject(keyPair.getPublic().getEncoded());
            out.flush();
            byte[] receivedPubKey = (byte[]) in.readObject();
            sharedKey = generateSharedKey(keyPair.getPrivate(), receivedPubKey);
        } else {
            byte[] receivedPubKey = (byte[]) in.readObject();
            out.writeObject(keyPair.getPublic().getEncoded());
            out.flush();
            sharedKey = generateSharedKey(keyPair.getPrivate(), receivedPubKey);
        }

        log("Secure connection established!");
        isConnected = true;
        sendBtn.setEnabled(true);
    }

    private SecretKey generateSharedKey(PrivateKey privateKey, byte[] publicKeyBytes) throws Exception {
        KeyFactory kf = KeyFactory.getInstance("DH");
        X509EncodedKeySpec spec = new X509EncodedKeySpec(publicKeyBytes);
        PublicKey publicKey = kf.generatePublic(spec);

        KeyAgreement ka = KeyAgreement.getInstance("DH");
        ka.init(privateKey);
        ka.doPhase(publicKey, true);

        byte[] sharedSecret = ka.generateSecret();
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] keyBytes = md.digest(sharedSecret);
        
        return new SecretKeySpec(keyBytes, 0, 16, "AES");
    }

    private String encrypt(String plaintext) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, sharedKey);
        
        byte[] iv = cipher.getIV();
        byte[] encrypted = cipher.doFinal(plaintext.getBytes("UTF-8"));
        
        byte[] combined = new byte[iv.length + encrypted.length];
        System.arraycopy(iv, 0, combined, 0, iv.length);
        System.arraycopy(encrypted, 0, combined, iv.length, encrypted.length);
        
        return Base64.getEncoder().encodeToString(combined);
    }

    private String decrypt(String ciphertext) throws Exception {
        byte[] combined = Base64.getDecoder().decode(ciphertext);
        
        byte[] iv = new byte[16];
        byte[] encrypted = new byte[combined.length - 16];
        System.arraycopy(combined, 0, iv, 0, 16);
        System.arraycopy(combined, 16, encrypted, 0, encrypted.length);
        
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, sharedKey, new IvParameterSpec(iv));
        
        byte[] decrypted = cipher.doFinal(encrypted);
        return new String(decrypted, "UTF-8");
    }

    private void sendPassword() {
        if (!isConnected) {
            log("Not connected!");
            return;
        }

        String password = passwordField.getText();
        if (password.isEmpty()) {
            log("Please enter a password to send");
            return;
        }

        try {
            String encrypted = encrypt(password);
            out.writeObject(encrypted);
            out.flush();
            log("Password sent (encrypted)");
            passwordField.setText("");
        } catch (Exception e) {
            log("Error sending password: " + e.getMessage());
        }
    }

    private void startReceiving() {
        new Thread(() -> {
            try {
                while (isConnected) {
                    String encrypted = (String) in.readObject();
                    String decrypted = decrypt(encrypted);
                    log("Received password: " + decrypted);
                    
                    // Copy to clipboard
                    StringSelection selection = new StringSelection(decrypted);
                    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection, null);
                    log("Password copied to clipboard!");
                }
            } catch (Exception e) {
                if (isConnected) {
                    log("Connection closed");
                    isConnected = false;
                    sendBtn.setEnabled(false);
                    startServerBtn.setEnabled(true);
                    connectBtn.setEnabled(true);
                }
            }
        }).start();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new P2PPasswordShare());
    }
}
